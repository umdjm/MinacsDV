

<div id="map-row" class="row">
  <div class="span12">
    <div id="map-div"></div>
  </div>
</div>

<div id="charts" class="row">
  <div id="val-chart1" class="chart span6">
      <div class="title">RO Amount ($)</div>
  </div>
  <div id="val-chart2" class="chart span6">
    <div class="title">Distance to Dealership (Miles)</div>
  </div>
</div>

<div id="lists" class="row">
  <div class="span12">
    <table id="account-list" class="list table table-striped table-bordered" >
      <thead>
        <th class="AccountId">Id</th>
        <th class="AccountName">Name</th>
        <th class="AccountAddress">Address</th>
        <th class="Amount">Amount</th>
        <th class="Radius">Radius</th>
      </thead>
    </table>
  </div>
</div>

<script>

var map;
var markers = [];
var points = [];

var filter;
var val1Dimension;
var val1Grouping;
var charts;
var domCharts;

var latDimension;
var lngDimension;
var idDimension;
var idGrouping;
var list;

function init() {
  initMap();
  initCrossfilter();

  latDimension = filter.dimension(function(p) { return parseFloat(p.lat) });
  lngDimension = filter.dimension(function(p) { return parseFloat(p.lng) });
  google.maps.event.addListener(map, 'bounds_changed', function() {
    var bounds = this.getBounds();
    var northEast = bounds.getNorthEast();
    var southWest = bounds.getSouthWest();

    lngDimension.filterRange([southWest.lng(), northEast.lng()]);
    latDimension.filterRange([southWest.lat(), northEast.lat()]);

    renderAll();
  });

  // dimension and group for looking up currently selected markers
  idDimension = filter.dimension(function(p, i) { return i; });
  idGrouping = idDimension.group(function(i) { return i; });

  // Render the initial lists.
  list = d3.selectAll(".list")
      .data([accountList]);

  renderAll();
}

function initData()
{
   $.ajax({
    type: "GET",
    dataType: "json",
    async: false,
    url: "/campaign_members/geodata",
    success: function(data){
      points = data;
      init();
    }
  });
}

function initMap() {
  google.maps.visualRefresh = true;

  var centerPos = new google.maps.LatLng(42.4864196243879135, -83.2806066962856802);
  var mapOptions = {
    zoom: 10,
    center: centerPos,
    mapTypeId: google.maps.MapTypeId.ROADMAP,
    mapTypeControl: false,
    streetViewControl: false
  };
  map = new google.maps.Map(document.getElementById('map-div'), mapOptions);

  // create array of markers from points and add them to the map
  for (var i = 0; i < points.length; i++) {
    var point = points[i];
    var position = new google.maps.LatLng(point.lat, point.lng);
    point.radius = distanceBetweenTwoPoints(centerPos, position);

    markers[i] = new google.maps.Marker({
      position: position,
      map: map,
      title: point.name + ',' + point.address + ', $' + point.amount 
    });
  }
}


function accountList(table) {

  table.each(function() {
    var account = d3.select(this).selectAll(".account")
        .data(idDimension.top(10), 
          function(d) { 
            return d.id; 
          });

    var accountEnter = account.enter().append("tr")
        .attr("class", "account");

    accountEnter.append("td")
        .attr("class", "AccountId")
        .text(function(d) { return d.id; });

    accountEnter.append("td")
        .attr("class", "AccountName")
        .text(function(d) { return d.name; });

    accountEnter.append("td")
        .attr("class", "AccountAddress")
        .text(function(d) { return d.address; });

    accountEnter.append("td")
        .attr("class", "Amount")
        .text(function(d) { return "$" + d.amount; });

    accountEnter.append("td")
        .attr("class", "Radius")
        .text(function(d) { return d.radius; });

    account.exit().remove();

    account.order();
  });
}

function initCrossfilter() {
  filter = crossfilter(points);

  // simple dimensions and groupings for major variables
  val1Dimension = filter.dimension(
      function(p) {
        return p.amount;
      });
  val1Grouping = val1Dimension.group(
      function(v) {
        return Math.floor(v / 100) * 100;;
      });
  val2Dimension = filter.dimension(
      function(p) {
        return p.radius;
      });
  val2Grouping = val2Dimension.group(
      function(v) {
        return v;
      });

  // initialize charts (helper function in chart.js)
  // taken directly from crossfilter's example
  charts = [
    barChart()
      .dimension(val1Dimension)
      .group(val1Grouping)
      .x(d3.scale.linear()
          .domain([0, 5000])
          .rangeRound([0, 500])),

    barChart()
      .dimension(val2Dimension)
      .group(val2Grouping)
      .x(d3.scale.linear()
          .domain([0, 10])
          .rangeRound([0, 500]))
  ];

  // bind charts to dom
  domCharts = d3.selectAll(".chart")
      .data(charts)
      .each(function(chart) { chart.on("brush", renderAll).on("brushend", renderAll); });
}

// Renders the specified chart
function render(method) {
  d3.select(this).call(method);
}

// Renders all of the charts
function updateCharts() {
  domCharts.each(render);
}

// set visibility of markers based on crossfilter
function updateMarkers() {
  var pointIds = idGrouping.all();
  for (var i = 0; i < pointIds.length; i++) {
    var pointId = pointIds[i];
    markers[pointId.key].setVisible(pointId.value > 0);
  }
}

// Whenever the brush moves, re-render charts and map markers
function renderAll() {
  updateCharts();
  updateMarkers();
  list.each(render);
}

// Reset a particular histogram
window.reset = function(i) {
  charts[i].filter(null);
  renderAll();
};

    document.addEventListener('DOMContentLoaded', initData, false);
</script>